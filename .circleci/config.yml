version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Back-end build
          command: |
            cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - save_cache:
          paths: [backend/dist]
          key: backend-dist 
      - run:
          name: Copy compiled backend for future use in ansible
          command: |
            # mkdir /tmp/workspace/
            cp ./backend/package.json /tmp/workspace/
            cd backend/dist
            tar -zcvf /tmp/workspace/backend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend.tar.gz
            - package.json

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
          keys: [frontend-build]
       - run:
          name: Test front-end
          command: |
            cd frontend
            npm install 
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
          keys: [backend-build]
       - run:
          name: Test back-end
          command: |
            cd backend
            npm install 
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
      #  - restore_cache:
      #     keys: [frontend-build]
       - run:
          name: Scan front-end
          command: |
            ls
            cd frontend
            ls
            npm audit fix --audit-level=critical --force


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
      #  - restore_cache:
      #     keys: [backend-build]
       - run:
          name: Scan back-end
          command: |
            ls
            cd backend
            ls
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
        
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
        
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --region us-west-2  \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
              echo ${BACKEND_IP}
               curl -H "Content-Type: text/plain" \
              -H "token: 1056f25f-a95f-487f-93d1-ad9feb0536c3" \
              --request PUT --data "$BACKEND_IP" \
              https://api.memstash.io/values/backend_ip_address

      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/backend/

      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [8d:2e:6c:f1:40:9c:7b:d7:7a:1d:23:a0:cd:ab:59:05]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl
            pip install awscli
            ansible-galaxy install weareinteractive.environment

            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            aws ec2 describe-instances --region us-west-2  \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            
            #  echo $(curl -H "token:  260f5b61-00fd-475f-aeb2-5afcf4d42afd" --request GET https://api.memstash.io/values/backend_ip_address) >> .circleci/ansible/inventory.txt

            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/configure-server.yml
      # - run:
      #       name: Install AWS CLI for rollback
      #       when: on_fail
      #       command: |
      #         apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
        
      - destroy-environment:
              workflow_id: "${CIRCLE_WORKFLOW_ID}"   



  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
            cd backend
            npm install
            npm run migrations > migration.txt
            cat migration.txt 
            # if grep -q "has been executed successfully" migration.txt; 
            # then
            #   echo "successfully migrations" > ~/project/.circleci/outputs/db_migration_success
            #  exit 0;
            # else 
            #   exit 1; 
            # fi;
            
      - run:
          name: Send migration results to memstash
          command: |
           curl -H "Content-Type: text/plain" \
              -H "token: 1056f25f-a95f-487f-93d1-ad9feb0536c3" \
              --request PUT --data "1" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      - revert-migrations
      - run:
            name: Install AWS CLI for rollback
            when: on_fail
            command: |
               sudo apt-get update && \
               sudo apt-get install -y \
                    python3 \
                    python3-pip \
                    python3-setuptools \
                    groff \
                    less \
               && sudo pip3 install --upgrade pip \
               && sudo apt-get clean && sudo pip3 install awscli
      - destroy-environment:
              workflow_id: "${CIRCLE_WORKFLOW_ID}"       

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli

      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --region us-west-2 \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ENVIRONMENT=production > "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
            echo "${API_URL}"            
            echo "BACKEND_IP: ${BACKEND_IP}"            
      - run:
          name: Build frontend
          command: |
            cd frontend
            cat .env
            npm install
            npm run build
      
      - run:
          name: Deploy frontend objects
          command: |
              aws s3 cp --recursive frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}"
      - revert-migrations
      - destroy-environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID}"     
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [8d:2e:6c:f1:40:9c:7b:d7:7a:1d:23:a0:cd:ab:59:05]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar nodejs npm curl 
            ansible-galaxy install weareinteractive.environment
            pip install awscli
      - restore_cache:
          keys: ["backend-dist"]
      - run:
          name: Create .env file and log folders
          command: |
            echo $(pwd)
            ls /root/project/backend

      - run:
          name: Deploy backend
          command: |
            aws ec2 describe-instances --region us-west-2  \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/deploy-backend.yml

      - revert-migrations
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl 
            pip install awscli
      - run:
          name: Get backend url
          command: |
            echo "BACKEND_IP>> ${BACKEND_IP}"
            echo "${API_URL}"
            
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --region us-west-2 \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo "BACKEND_IP: ${BACKEND_IP}"
            if curl -s https://${BACKEND_IP}:3030/api/status
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - revert-migrations
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl 
            pip install awscli

      - run:
          name: Update cloudfront distribution
          command: |
            OldWorkflowId=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --output text)
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --output text)
            echo OldWorkflowId: ${OldWorkflowId}
            echo Test 2
            echo STACKS: ${STACKS}
            echo Update CloudFront
            aws cloudformation deploy \
              --stack-name circleci-stack \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --tags Name=udacity-prod \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID}
              
            echo Delete old stacks/resources            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowId}" ]]
            then
              # Delete files from bucket
              echo Delete old stacks/resources ${OldWorkflowId}
              aws s3 rm s3://udapeople-${OldWorkflowId}/ --recursive
              # Delete front end stack
              aws cloudformation delete-stack --stack-name udacity-frontend-${OldWorkflowId}
              # Delete back end stack
              aws cloudformation delete-stack --stack-name udacity-backend-${OldWorkflowId}
            fi
            exit 1

      - revert-migrations
      - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID}

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]